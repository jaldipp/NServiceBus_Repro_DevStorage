<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NServiceBus.Azure</name>
    </assembly>
    <members>
        <member name="T:NServiceBus.AzureDataBus">
            <summary>
            Defines Azure databus that can be used by NServiceBus
            </summary>
        </member>
        <member name="T:NServiceBus.AzureDataBusPersistence">
            <summary>
            Used to configure Azure databus
            </summary>
        </member>
        <member name="M:NServiceBus.AzureDataBusPersistence.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)"/>
            </summary>
        </member>
        <member name="M:NServiceBus.AzureStorageSagaPersistence.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)"/>
            </summary>
        </member>
        <member name="T:NServiceBus.SagaPersisters.ConfigureAzureSagaStorage">
            <summary>
            Configuration extensions for the sagas storage
            </summary>
        </member>
        <member name="M:NServiceBus.SagaPersisters.ConfigureAzureSagaStorage.ConnectionString(NServiceBus.PersistenceExtentions{NServiceBus.AzureStoragePersistence,NServiceBus.Persistence.StorageType.Sagas},System.String)">
            <summary>
            Connection string to use for sagas storage.
            </summary>
        </member>
        <member name="M:NServiceBus.SagaPersisters.ConfigureAzureSagaStorage.CreateSchema(NServiceBus.PersistenceExtentions{NServiceBus.AzureStoragePersistence,NServiceBus.Persistence.StorageType.Sagas},System.Boolean)">
            <summary>
            Should an attempt be made to create saga storage table or not.
            <remarks>Operation will fail if connection string does not allow access to create storage tables</remarks>
            </summary>
        </member>
        <member name="M:NServiceBus.AzureStorageSubscriptionPersistence.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)"/>
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureAzureBlobStorageDataBus">
            <summary>
            Contains extension methods to NServiceBus.Configure for the azure blob storage data bus
            </summary>
        </member>
        <member name="T:NServiceBus.Logging.Loggers.TraceLogger">
            <summary/>
        </member>
        <member name="P:NServiceBus.Logging.Loggers.TraceLogger.IsDebugEnabled">
            <summary/>
        </member>
        <member name="P:NServiceBus.Logging.Loggers.TraceLogger.IsInfoEnabled">
            <summary/>
        </member>
        <member name="T:NServiceBus.ConfigureAzureSagaPersister">
            <summary>
            Contains extension methods to NServiceBus.Configure for the saga persister on top of Azure table storage.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureAzureSagaPersister.AzureSagaPersister(NServiceBus.Configure)">
            <summary>
            Use the table storage backed saga persister implementation.
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.ConfigureAzureSagaPersister.AzureSagaPersister(NServiceBus.Configure,System.String,System.Boolean)">
            <summary>
            Use the table storage backed saga persister implementation on top of Azure table storage.
            </summary>
            <param name="config"></param>
            <param name="connectionString"></param>
            <param name="autoUpdateSchema"></param>
            <returns></returns>
        </member>
        <member name="T:NServiceBus.ConfigureAzureSubscriptionStorage">
            <summary>
            Configuration extensions for the subscription storage
            </summary>
            <summary>
            Configuration extensions for the subscription storage
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureAzureSubscriptionStorage.AzureSubscriptionStorage(NServiceBus.Configure)">
            <summary>
            Configures NHibernate Azure Subscription Storage , Settings etc are read from custom config section
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.ConfigureAzureSubscriptionStorage.AzureSubscriptionStorage(NServiceBus.Configure,System.String,System.Boolean,System.String)">
            <summary>
            Configures the storage with the user supplied persistence configuration
            Azure tables are created if requested by the user
            </summary>
            <param name="config"></param>
            <param name="connectionString"></param>
            <param name="createSchema"></param>
            <param name="tableName"> </param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.ConfigureAzureSubscriptionStorage.ConnectionString(NServiceBus.PersistenceExtentions{NServiceBus.AzureStoragePersistence,NServiceBus.Persistence.StorageType.Subscriptions},System.String)">
            <summary>
            Connection string to use for subscriptions storage.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureAzureSubscriptionStorage.TableName(NServiceBus.PersistenceExtentions{NServiceBus.AzureStoragePersistence,NServiceBus.Persistence.StorageType.Subscriptions},System.String)">
            <summary>
            Table name to create in Azure storage account to persist subscriptions.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureAzureSubscriptionStorage.CreateSchema(NServiceBus.PersistenceExtentions{NServiceBus.AzureStoragePersistence,NServiceBus.Persistence.StorageType.Subscriptions},System.Boolean)">
            <summary>
            Should an attempt at startup be made to verify if subscriptions storage table exists or not and if not create it.
            <remarks>Operation will fail if connection string does not allow access to create storage tables</remarks>
            </summary>
        </member>
        <member name="T:NServiceBus.Config.AzureSagaPersisterConfig">
            <summary>
            Config section for the Azure Saga Persister
            </summary>
        </member>
        <member name="P:NServiceBus.Config.AzureSagaPersisterConfig.ConnectionString">
            <summary>
            Connectionstring
            </summary>
        </member>
        <member name="P:NServiceBus.Config.AzureSagaPersisterConfig.CreateSchema">
            <summary>
            Â´Determines if the database should be auto updated
            </summary>
        </member>
        <member name="T:NServiceBus.Config.AzureTimeoutPersisterConfig">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceBus.SagaPersisters.Azure.AzureSagaPersister">
            <summary>
            Saga persister implementation using azure table storage.
            </summary>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.AzureSagaPersister.#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.Boolean)">
            <summary>
            
            </summary>
            <param name="account"></param>
            <param name="autoUpdateSchema"></param>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.AzureSagaPersister.Save(NServiceBus.Saga.IContainSagaData)">
            <summary>
            Saves the given saga entity using the current session of the
            injected session factory.
            </summary>
            <param name="saga">the saga entity that will be saved.</param>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.AzureSagaPersister.Update(NServiceBus.Saga.IContainSagaData)">
            <summary>
            Updates the given saga entity using the current session of the
            injected session factory.
            </summary>
            <param name="saga">the saga entity that will be updated.</param>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.AzureSagaPersister.Get``1(System.Guid)">
            <summary>
            Gets a saga entity from the injected session factory's current session
            using the given saga id.
            </summary>
            <param name="sagaId">The saga id to use in the lookup.</param>
            <returns>The saga entity if found, otherwise null.</returns>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.AzureSagaPersister.Complete(NServiceBus.Saga.IContainSagaData)">
            <summary>
            Deletes the given saga from the injected session factory's
            current session.
            </summary>
            <param name="saga">The saga entity that will be deleted.</param>
        </member>
        <member name="T:NServiceBus.SagaPersisters.Azure.DictionaryTableEntity">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.DictionaryTableEntity.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.DictionaryTableEntity.Add(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.DictionaryTableEntity.Add(System.String,System.Byte[])">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.DictionaryTableEntity.Add(System.String,System.Nullable{System.DateTime})">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.DictionaryTableEntity.Add(System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.DictionaryTableEntity.Add(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.DictionaryTableEntity.Add(System.String,System.Guid)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.DictionaryTableEntity.Add(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.DictionaryTableEntity.Add(System.String,System.Int64)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.DictionaryTableEntity.Add(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="F:NServiceBus.AzureTimeoutStorageDefaults.CatchUpInterval">
            <summary>
            Catchup interval in seconds. Default is 1 hour.
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureAzureTimeoutStorage">
            <summary>
            Configuration extensions for the subscription storage
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureAzureTimeoutStorage.ConnectionString(NServiceBus.PersistenceExtentions{NServiceBus.AzureStoragePersistence,NServiceBus.Persistence.StorageType.Timeouts},System.String)">
            <summary>
            Connection string to use for timeouts storage.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureAzureTimeoutStorage.CreateSchema(NServiceBus.PersistenceExtentions{NServiceBus.AzureStoragePersistence,NServiceBus.Persistence.StorageType.Timeouts},System.Boolean)">
            <summary>
            Should an attempt at startup be made to verify if storage tables for timeouts exist or not and if not create those.
            <remarks>Operation will fail if connection string does not allow access to create storage tables</remarks>
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureAzureTimeoutStorage.TimeoutManagerDataTableName(NServiceBus.PersistenceExtentions{NServiceBus.AzureStoragePersistence,NServiceBus.Persistence.StorageType.Timeouts},System.String)">
            <summary>
            Set the name of the table where the timeout manager stores it's internal state.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureAzureTimeoutStorage.TimeoutDataTableName(NServiceBus.PersistenceExtentions{NServiceBus.AzureStoragePersistence,NServiceBus.Persistence.StorageType.Timeouts},System.String)">
            <summary>
             Set the name of the table where the timeouts themselves are stored.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureAzureTimeoutStorage.CatchUpInterval(NServiceBus.PersistenceExtentions{NServiceBus.AzureStoragePersistence,NServiceBus.Persistence.StorageType.Timeouts},System.Int32)">
            <summary>
             Set the catchup interval in seconds for missed timeouts.
            </summary>
            <param name="catchUpInterval">Catch up interval in seconds</param>
            <param name="config"></param>
        </member>
        <member name="M:NServiceBus.ConfigureAzureTimeoutStorage.PartitionKeyScope(NServiceBus.PersistenceExtentions{NServiceBus.AzureStoragePersistence,NServiceBus.Persistence.StorageType.Timeouts},System.String)">
            <summary>
             Time range used as partition key value for all timeouts.
            </summary>
            <param name="partitionKeyScope">Partition key DateTime format string.</param>
            <param name="config"></param>
            <remarks>For optimal performance, this should be in line with the CatchUpInterval.</remarks>
        </member>
        <member name="M:NServiceBus.AzureStorageTimeoutPersistence.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)"/>
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureTimeoutManager.UseAzureTimeoutPersister(NServiceBus.Configure)">
            <summary>
            Use the in azure timeout persister implementation.
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="P:NServiceBus.Azure.TimeoutDataEntity.Destination">
            <summary>
            The address of the client who requested the timeout.
            </summary>
        </member>
        <member name="P:NServiceBus.Azure.TimeoutDataEntity.SagaId">
            <summary>
            The saga ID.
            </summary>
        </member>
        <member name="P:NServiceBus.Azure.TimeoutDataEntity.StateAddress">
            <summary>
            Additional state.
            </summary>
        </member>
        <member name="P:NServiceBus.Azure.TimeoutDataEntity.Time">
            <summary>
            The time at which the saga ID expired.
            </summary>
        </member>
        <member name="P:NServiceBus.Azure.TimeoutDataEntity.OwningTimeoutManager">
            <summary>
            The timeout manager that owns this particular timeout
            </summary>
        </member>
        <member name="P:NServiceBus.Azure.TimeoutDataEntity.Headers">
            <summary>
            The serialized headers
            </summary>
        </member>
        <member name="P:NServiceBus.Azure.TimeoutManagerDataEntity.LastSuccessfullRead">
            <summary>
            The last successfull chunk read.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Subscriptions.AzureSubscriptionStorage">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.AzureSubscriptionStorage.#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount)">
            <summary>
            
            </summary>
            <param name="account"></param>
        </member>
        <member name="T:NServiceBus.Unicast.Subscriptions.Subscription">
            <summary>
            Enity containing subscription data
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Subscriptions.SubscriptionServiceContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.SubscriptionServiceContext.#ctor(Microsoft.WindowsAzure.Storage.Table.CloudTableClient)">
            <summary>
            
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.SubscriptionServiceContext.Init(Microsoft.WindowsAzure.Storage.Table.CloudTableClient)">
            <summary>
            
            </summary>
        </member>
        <member name="F:NServiceBus.Unicast.Subscriptions.SubscriptionServiceContext.SubscriptionTableName">
            <summary>
            Subscriptions table name.
            </summary>
        </member>
        <member name="F:NServiceBus.Unicast.Subscriptions.SubscriptionServiceContext.CreateIfNotExist">
            <summary>
            Should subscription table be created or not.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Subscriptions.SubscriptionServiceContext.Subscriptions">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
